{"version":3,"sources":["Services/repository.ts","Services/profile-info.service.ts","Store.tsx","Services/login.service.ts","Components/LoginPage/LoginPage.tsx","Services/fetch-page-data.service.ts","Services/logout.service.ts","Services/submit-track.service.ts","Services/toogle-rate.service.ts","Components/RoundTable/RoundTable.tsx","Components/RoundBlock/RoundBlock.tsx","Components/MainPage/MainPage.tsx","Components/App/App.tsx","index.tsx"],"names":["baseFetchOptions","headers","credentials","mode","request","url","options","a","fetch","response","json","data","status","statusText","console","log","URL_API_PROFILE_INFO","getInfo","method","error","Store","id","username","color","rounds","categories","makeAutoObservable","this","find","x","StoreContext","React","createContext","store","StoreProvider","children","Provider","value","useStore","useContext","URL_API_AUTH_LOGIN","login","password","body","JSON","stringify","LoginPage","navigate","useNavigate","useState","setUsername","setPassword","setError","submitLogin","event","preventDefault","serviceResponse","inputNodes","name","placeholder","type","changeHook","e","target","map","inputObject","index","className","required","onChange","onSubmit","URL_API_FETCH_BATTLE_DATA","fetchBattleData","URL_API_AUTH_LOGOUT","logout","URL_API_SUBMIT_TRACK","submitTrack","roundId","URL_API_TOGGLE_RATE","toggleRate","categoryId","trackId","RoundTable","observer","round","getRound","rateToggleHandler","isAuth","updateBattleData","tracks","track","style","userColor","userUsername","rows","category","rates","marks","filter","rate","title","onClick","totalRates","total","length","RoundBlock","showSubmitTrackForm","setShowSubmitTrackForm","newTrackName","setNewTrackName","submitTrackError","setSubmitTrackError","roundHasMyTrack","userId","submitBtn","submitHandler","window","location","reload","submitTrackForm","roundStyle","date","Date","lastDay","toLocaleDateString","day","month","year","number","theme","MainPage","fetchPageData","useEffect","logoutHandler","logoutBtn","loginBtn","authBtn","App","onLoad","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ce615fa.chunk.js","sourcesContent":["export interface RepositoryResponse {\n  status: string;\n  data: any;\n}\n\nconst baseFetchOptions = {\n  headers: {\n    \"Content-Type\": \"application/json\",\n    credentials: \"include\",\n    mode: \"cors\",\n  },\n};\n\nexport const request = async (\n  url: string,\n  options: {\n    body?: string;\n    method: string;\n  }\n): Promise<RepositoryResponse> => {\n  options = {\n    ...baseFetchOptions,\n    ...options,\n  };\n\n  try {\n    const response = await fetch(url, options);\n    const data = await response.json();\n    return {\n      status: response.statusText,\n      data,\n    };\n  } catch (error) {\n    console.log(error);\n    return {\n      status: \"Error\",\n      data: \"Неизвестная ошибка\",\n    };\n  }\n};\n","import { Profile } from \"./../Entities/profile\";\nimport { request, RepositoryResponse } from \"./repository\";\n\nconst URL_API_PROFILE_INFO = \"/api/profile\";\n\nexport interface ServiceResponse {\n  status: \"OK\" | \"ERROR\";\n  data?: Profile;\n  error?: string;\n}\n\nexport async function getInfo(): Promise<ServiceResponse> {\n  const method = \"GET\";\n\n  const options = {\n    method,\n  };\n\n  const response: RepositoryResponse = await request(\n    URL_API_PROFILE_INFO,\n    options\n  );\n\n  if (response.status === \"OK\") {\n    const data = response.data;\n    return {\n      status: \"OK\",\n      data,\n    };\n  }\n\n  return {\n    status: \"ERROR\",\n    error: response.data.error,\n  };\n}\n","import { makeAutoObservable } from \"mobx\";\nimport React, { useContext } from \"react\";\nimport { Category, Round } from \"./Entities/battle-entities\";\n\nclass Store {\n  id: number | null = null;\n  username: string | null = null;\n  color: string | null = null;\n\n  rounds: Round[] = [];\n  categories: Category[] = [];\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  login(id: number, username: string, color: string) {\n    this.id = id;\n    this.username = username;\n    this.color = color;\n  }\n\n  logout() {\n    this.id = null;\n    this.username = null;\n    this.color = null;\n  }\n\n  updateBattleData(rounds: Round[], categories: Category[]) {\n    this.rounds = rounds;\n    this.categories = categories;\n  }\n\n  get isAuth(): boolean {\n    return this.id ? true : false;\n  }\n\n  getRound(id: number): Round | undefined {\n    return this.rounds.find((x) => x.id === id);\n  }\n}\n\nconst StoreContext = React.createContext<Store>({} as Store);\n\nconst store = new Store();\n\nconst StoreProvider: React.FC<React.PropsWithChildren<{}>> = ({ children }) => {\n  return (\n    <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\n  );\n};\n\nconst useStore = () => useContext(StoreContext);\n\nexport { StoreProvider, useStore };\n","import { Profile } from './../Entities/profile';\nimport { request, RepositoryResponse } from \"./repository\";\n\nconst URL_API_AUTH_LOGIN = \"/api/login\";\n\nexport interface ServiceResponse {\n  status: \"OK\" | \"ERROR\";\n  data?: Profile;\n  error?: string;\n}\n\nexport async function login(\n  username: string,\n  password: string\n): Promise<ServiceResponse> {\n  const data = {\n    username,\n    password,\n  };\n  const body = JSON.stringify(data);\n  const method = \"POST\";\n\n  const options = {\n    method,\n    body,\n  };\n\n  const response: RepositoryResponse = await request(\n    URL_API_AUTH_LOGIN,\n    options\n  );\n\n  if (response.status === \"OK\") {\n    const data = response.data;\n    return {\n      status: \"OK\",\n      data\n    };\n  }\n\n  return {\n    status: \"ERROR\",\n    error: response.data.error,\n  };\n}\n","import React, { useState } from \"react\";\nimport \"./LoginPage.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport { login, ServiceResponse } from \"../../Services/login.service\";\nimport { useStore } from \"../../Store\";\n\ntype FormInput = {\n  name: string;\n  placeholder: string;\n  type: string;\n  changeHook(e: React.ChangeEvent<HTMLInputElement>): void;\n};\n\nexport const LoginPage = () => {\n  const store = useStore();\n  const navigate = useNavigate();\n  const [username, setUsername] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const [error, setError] = useState<string | null>(null);\n\n  const submitLogin = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const serviceResponse: ServiceResponse = await login(username, password);\n\n    if (serviceResponse.status === \"OK\") {\n      const { id, username, color } = serviceResponse.data!;\n      store.login(id, username, color);\n      navigate(\"/\");\n    } else {\n      setError(serviceResponse.error!);\n    }\n  };\n\n  const formInputs: FormInput[] = [\n    {\n      name: \"username\",\n      placeholder: \"Username\",\n      type: \"text\",\n      changeHook: (e: React.ChangeEvent<HTMLInputElement>) =>\n        setUsername(e.target.value),\n    },\n    {\n      name: \"password\",\n      placeholder: \"Password\",\n      type: \"password\",\n      changeHook: (e: React.ChangeEvent<HTMLInputElement>) =>\n        setPassword(e.target.value),\n    },\n  ];\n\n  const inputNodes: React.ReactElement[] = formInputs.map(\n    (inputObject: FormInput, index: number): React.ReactElement => {\n      const { name, placeholder, type, changeHook } = inputObject;\n\n      return (\n        <div className=\"login-form__input-block\" key={index}>\n          <input\n            required\n            type={type}\n            name={name}\n            placeholder={placeholder}\n            onChange={changeHook}\n            className=\"login-form__input\"\n          />\n        </div>\n      );\n    }\n  );\n\n  return (\n    <div className=\"form-container\">\n      <h1>Enter ZPK</h1>\n      <form className=\"login-form\" onSubmit={submitLogin}>\n        {inputNodes}\n        <span className=\"login-form__error\">{error}</span>\n        <button className=\"login-form__button\">Log In</button>\n      </form>\n    </div>\n  );\n};\n","import { Category, Round } from \"./../Entities/battle-entities\";\nimport { request, RepositoryResponse } from \"./repository\";\n\nconst URL_API_FETCH_BATTLE_DATA = \"/api/battle-data\";\n\ntype BattleData = {\n  categories: Category[];\n  rounds: Round[];\n};\n\nexport interface ServiceResponse {\n  status: \"OK\" | \"ERROR\";\n  data?: BattleData;\n  error?: string;\n}\n\nexport async function fetchBattleData(): Promise<ServiceResponse> {\n  const method = \"GET\";\n\n  const options = {\n    method,\n  };\n\n  const response: RepositoryResponse = await request(\n    URL_API_FETCH_BATTLE_DATA,\n    options\n  );\n\n  if (response.status === \"OK\") {\n    const data = response.data;\n    return {\n      status: \"OK\",\n      data,\n    };\n  }\n\n  return {\n    status: \"ERROR\",\n    error: response.data.error,\n  };\n}\n","import { request, RepositoryResponse } from \"./repository\";\n\nconst URL_API_AUTH_LOGOUT = \"/api/logout\";\n\nexport interface ServiceResponse {\n  status: \"OK\" | \"ERROR\";\n  error?: string;\n}\n\nexport async function logout(): Promise<ServiceResponse> {\n  const method = \"POST\";\n\n  const options = {\n    method,\n  };\n\n  const response: RepositoryResponse = await request(\n    URL_API_AUTH_LOGOUT,\n    options\n  );\n\n  if (response.status === \"OK\") {\n    return {\n      status: \"OK\",\n    };\n  }\n\n  return {\n    status: \"ERROR\",\n    error: response.data.error,\n  };\n}\n","import { request, RepositoryResponse } from \"./repository\";\n\nconst URL_API_SUBMIT_TRACK = \"/api/submit-track\";\n\nexport interface ServiceResponse {\n  status: \"OK\" | \"ERROR\";\n  error?: string;\n}\n\nexport async function submitTrack(\n  roundId: number,\n  name: string\n): Promise<ServiceResponse> {\n  const data = {\n    roundId,\n    name,\n  };\n  const body = JSON.stringify(data);\n  const method = \"POST\";\n\n  const options = {\n    method,\n    body,\n  };\n\n  const response: RepositoryResponse = await request(\n    URL_API_SUBMIT_TRACK,\n    options\n  );\n\n  if (response.status === \"OK\") {\n    return {\n      status: \"OK\",\n    };\n  }\n\n  return {\n    status: \"ERROR\",\n    error: response.data.error,\n  };\n}\n","import { request, RepositoryResponse } from \"./repository\";\n\nconst URL_API_TOGGLE_RATE = \"/api/toggle-rate\";\n\nexport interface ServiceResponse {\n  status: \"OK\" | \"ERROR\";\n  error?: string;\n}\n\nexport async function toggleRate(\n  roundId: number,\n  categoryId: number,\n  trackId: number\n): Promise<ServiceResponse> {\n  const data = {\n    roundId,\n    categoryId,\n    trackId,\n  };\n  const body = JSON.stringify(data);\n  const method = \"POST\";\n\n  const options = {\n    method,\n    body,\n  };\n\n  const response: RepositoryResponse = await request(\n    URL_API_TOGGLE_RATE,\n    options\n  );\n\n  if (response.status === \"OK\") {\n    return {\n      status: \"OK\",\n    };\n  }\n\n  return {\n    status: \"ERROR\",\n    error: response.data.error,\n  };\n}\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { fetchBattleData } from \"../../Services/fetch-page-data.service\";\nimport { toggleRate } from \"../../Services/toogle-rate.service\";\nimport { useStore } from \"../../Store\";\nimport \"./RoundTable.css\";\n\nexport const RoundTable: React.FC<\n  React.PropsWithoutRef<{ roundId: number }>\n> = observer(({ roundId }) => {\n  const store = useStore();\n  const round = store.getRound(roundId);\n\n  const rateToggleHandler = async (\n    roundId: number,\n    categoryId: number,\n    trackId: number\n  ) => {\n    if (!store.isAuth) {\n      return;\n    }\n\n    const serviceResponse = await toggleRate(roundId, categoryId, trackId);\n    if (serviceResponse.status === \"OK\") {\n      const serviceResponse = await fetchBattleData();\n      if (serviceResponse.status === \"OK\") {\n        const { categories, rounds } = serviceResponse.data!;\n        store.updateBattleData(rounds, categories);\n      } else {\n        console.log(serviceResponse.error);\n      }\n    } else {\n      console.log(serviceResponse.error!);\n    }\n  };\n\n  const headers = round!.tracks.map((track) => {\n    return (\n      <div className=\"round-table__item\">\n        <span\n          className=\"round-table__username\"\n          style={{ color: track.userColor }}\n        >\n          {track.userUsername}\n        </span>\n        <span className=\"round-table__track-name\">{track.name}</span>\n      </div>\n    );\n  });\n\n  const rows = store.categories.map((category) => {\n    const rates = round!.tracks.map((track) => {\n      const rates = track.rates.filter((x) => x.categoryId === category.id);\n\n      const marks = rates.map((rate) => {\n        return (\n          <span\n            className=\"round-table__rate\"\n            style={{ color: rate.userColor }}\n            title={rate.userUsername}\n          >\n            +\n          </span>\n        );\n      });\n\n      return (\n        <div\n          className=\"round-table__item round-table__item-rate\"\n          onClick={() => {\n            rateToggleHandler(roundId, category.id, track.id);\n          }}\n        >\n          {marks}\n        </div>\n      );\n    });\n    return (\n      <div className=\"round-table__row\">\n        <div className=\"round-table__category\">{category.name}</div>\n        {rates}\n      </div>\n    );\n  });\n\n  const totalRates = round!.tracks.map((track) => {\n    const total = track.rates.length;\n    return (\n      <div className=\"round-table__item round-table__total-rates\">{total}</div>\n    );\n  });\n\n  return (\n    <div className=\"round-table-block\">\n      <div className=\"round-table\">\n        <div className=\"round-table__row-header\">\n          <div className=\"round-table__category\"></div>\n          {headers}\n        </div>\n        {rows}\n        <div className=\"round-table__row\">\n          <div className=\"round-table__category\"></div>\n          {totalRates}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import { observer } from \"mobx-react-lite\";\nimport React, { useState } from \"react\";\nimport { submitTrack } from \"../../Services/submit-track.service\";\nimport { useStore } from \"../../Store\";\nimport { RoundTable } from \"../RoundTable/RoundTable\";\nimport \"./RoundBlock.css\";\n\nexport const RoundBlock: React.FC<\n  React.PropsWithoutRef<{ roundId: number }>\n> = observer(({ roundId }) => {\n  const [showSubmitTrackForm, setShowSubmitTrackForm] = useState<boolean>(\n    false\n  );\n  const [newTrackName, setNewTrackName] = useState<string>(\"\");\n  const [submitTrackError, setSubmitTrackError] = useState<string | null>(null);\n  const store = useStore();\n\n  const round = store.getRound(roundId);\n  const roundHasMyTrack = round!.tracks.find((x) => x.userId === store.id);\n\n  const submitBtn =\n    store.isAuth && !roundHasMyTrack && !showSubmitTrackForm ? (\n      <button\n        className=\"round__submit-btn\"\n        onClick={() => {\n          setShowSubmitTrackForm(true);\n        }}\n      >\n        Сдать трэк\n      </button>\n    ) : null;\n\n  const submitHandler = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const serviceResponse = await submitTrack(roundId, newTrackName);\n    if (serviceResponse.status === \"OK\") {\n      window.location.reload();\n    } else {\n      setSubmitTrackError(serviceResponse.error!);\n    }\n  };\n\n  const submitTrackForm = showSubmitTrackForm && (\n    <form className=\"round__submit-track-form\" onSubmit={submitHandler}>\n      <input\n        className=\"round__submit-track-form-input\"\n        type=\"text\"\n        required\n        placeholder=\"Название трэка\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          setNewTrackName(e.target.value);\n        }}\n      ></input>\n      <span className=\"round__submit-track-error\">{submitTrackError}</span>\n      <button className=\"round__submit-btn\">Подтвердить</button>\n    </form>\n  );\n\n  const roundStyle = round?.style ? (\n    <span className=\"round__title_style\">{round?.style}</span>\n  ) : null;\n\n  const options = { day: \"numeric\", month: \"long\", year: \"numeric\" };\n  const date = new Date(round?.lastDay!).toLocaleDateString(\"en-US\", options);\n\n  return (\n    <div className=\"round\">\n      <div className=\"round__header\">\n        <div className=\"round__title\">\n          <span className=\"round__title_number\">Раунд #{round?.number}</span>{\" \"}\n          <span className=\"round__title_theme\">{round?.theme}</span>{\" \"}\n          {roundStyle}\n        </div>\n        <span className=\"round__last-date\">Прием трэков до {date}</span>\n      </div>\n      <RoundTable roundId={roundId} />\n      <div className=\"round__submit-track\">\n        {submitBtn}\n        {submitTrackForm}\n      </div>\n    </div>\n  );\n});\n","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { fetchBattleData } from \"../../Services/fetch-page-data.service\";\nimport { logout } from \"../../Services/logout.service\";\nimport { useStore } from \"../../Store\";\nimport { RoundBlock } from \"../RoundBlock/RoundBlock\";\nimport \"./MainPage.css\";\n\nexport const MainPage = observer(() => {\n  const store = useStore();\n  const navigate = useNavigate();\n\n  const fetchPageData = async () => {\n    const serviceResponse = await fetchBattleData();\n    if (serviceResponse.status === \"OK\") {\n      const { categories, rounds } = serviceResponse.data!;\n      store.updateBattleData(rounds, categories);\n    } else {\n      console.log(serviceResponse.error);\n    }\n  };\n\n  useEffect(() => {\n    fetchPageData();\n  }, []);\n\n  const logoutHandler = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    await logout();\n    store.logout();\n  };\n\n  const logoutBtn: React.ReactNode = (\n    <button className=\"header__btn\" onClick={logoutHandler}>\n      Log Out\n    </button>\n  );\n\n  const loginHandler = () => {\n    navigate(\"/login\");\n  };\n\n  const loginBtn: React.ReactNode = (\n    <button className=\"header__btn\" onClick={loginHandler}>\n      Log In\n    </button>\n  );\n\n  const authBtn: React.ReactNode = store.isAuth ? logoutBtn : loginBtn;\n\n  const rounds = store.rounds.map((round, index) => {\n    return (\n      <div key={index}>\n        <RoundBlock roundId={round.id} />\n      </div>\n    );\n  });\n\n  return (\n    <div>\n      <header className=\"header\">\n        <span className=\"header__username\" style={{ color: store.color! }}>\n          {store.username}\n        </span>\n        {authBtn}\n      </header>\n      <div className=\"body\">{rounds}</div>\n    </div>\n  );\n});\n","import React, { useEffect } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { getInfo } from \"../../Services/profile-info.service\";\nimport { useStore } from \"../../Store\";\nimport { LoginPage } from \"../LoginPage/LoginPage\";\nimport { MainPage } from \"../MainPage/MainPage\";\nimport \"./App.css\";\n\nfunction App() {\n  const store = useStore();\n\n  useEffect(() => {\n    onLoad();\n  }, []);\n\n  const onLoad = async () => {\n    const serviceResponse = await getInfo();\n    if (serviceResponse.status === \"OK\") {\n      const { id, username, color } = serviceResponse.data!;\n      store.login(id, username, color);\n    } else {\n      store.logout();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Routes>\n        <Route path=\"/\" element={<MainPage />} />\n        <Route path=\"/login\" element={<LoginPage />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App/App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { StoreProvider } from \"./Store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreProvider>\n      <Router>\n        <App />\n      </Router>\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}